{"version":3,"sources":["components/home.js","components/header.js","App.js","serviceWorker.js","index.js"],"names":["Home","useState","todoList","setTodoList","modal","setModal","modalDetail","setModalDetail","id","setId","title","setTitle","description","setDescription","status","setStatus","status2","setStatus2","createdAt","setCreatedAt","detail","todo","console","log","newTodo","e","a","preventDefault","Math","max","apply","map","o","date","Date","toJSON","slice","array","target","value","parseInt","push","updateTodo","Todo","index","indexOf","deleteTodo","splice","getTodoList","axios","get","todoData","data","useEffect","Button","variant","onClick","style","marginBottom","Container","className","Table","tableLayout","filter","sort","b","key","Modal","show","onHide","keyboard","dialogClassName","aria-labelledby","centered","Header","closeButton","Title","Body","Form","onSubmit","Group","Label","Control","type","name","required","as","Footer","onChange","Navbar","bg","expand","Brand","color","Toggle","aria-controls","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4721c5f7.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport '../App.css';\r\nimport { Container, Table, Modal, Form, Button } from 'react-bootstrap';\r\n\r\nfunction Home() {\r\n  //Fields\r\n  const [todoList, setTodoList] = useState([]);\r\n  const [modal, setModal] = useState(false);\r\n  const [modalDetail, setModalDetail] = useState(false);\r\n  //Fields For Update\r\n  const [id, setId] = useState(0);\r\n  const [title, setTitle] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [status, setStatus] = useState(0);\r\n  const [status2, setStatus2] = useState(0);\r\n  const [createdAt, setCreatedAt] = useState();\r\n  //Detail\r\n  const detail = (todo) => {\r\n    setId(todo.id);\r\n    setTitle(todo.title);\r\n    setDescription(todo.description);\r\n    setStatus(todo.status);\r\n    setStatus2(todo.status);\r\n    setCreatedAt(todo.createdAt);\r\n    console.log(title);\r\n  };\r\n  const newTodo = async (e) => {\r\n    e.preventDefault();\r\n    const id =\r\n      Math.max.apply(\r\n        Math,\r\n        todoList.map(function (o) {\r\n          return o.id;\r\n        })\r\n      ) + 1;\r\n    const date =\r\n      new Date().toJSON().slice(0, 10) +\r\n      ' ' +\r\n      new Date().toJSON().slice(11, 16);\r\n    const array = todoList;\r\n    const newTodo = {\r\n      id: id,\r\n      title: e.target.title.value,\r\n      description: e.target.description.value,\r\n      status: parseInt(e.target.status.value),\r\n      createdAt: date,\r\n    };\r\n    array.push(newTodo);\r\n    setTodoList(array);\r\n    console.log(array);\r\n    setModal(false);\r\n  };\r\n  const updateTodo = async (e) => {\r\n    e.preventDefault();\r\n    const Todo = {\r\n      id: id,\r\n      title: title,\r\n      description: description,\r\n      status: parseInt(status),\r\n      createdAt: createdAt,\r\n    };\r\n    const array = todoList;\r\n    const index = todoList\r\n      .map(function (e) {\r\n        return e.id;\r\n      })\r\n      .indexOf(id);\r\n    array[index] = Todo;\r\n    console.log(array);\r\n    setTodoList(array);\r\n    setModalDetail(false);\r\n  };\r\n  const deleteTodo = async (e) => {\r\n    e.preventDefault();\r\n    const index = todoList\r\n      .map(function (e) {\r\n        return e.id;\r\n      })\r\n      .indexOf(id);\r\n    var array = todoList;\r\n    array.splice(index, 1);\r\n    console.log(array);\r\n    setTodoList(array);\r\n    setModalDetail(false);\r\n  };\r\n  const getTodoList = async () => {\r\n    const todoData = await axios.get(\r\n      'https://virtserver.swaggerhub.com/hanabyan/todo/1.0.0/to-do-list'\r\n    );\r\n    if (getTodoList) {\r\n      setTodoList(todoData.data);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTodoList();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Button\r\n        variant=\"success\"\r\n        onClick={() => setModal(true)}\r\n        style={{ marginBottom: '20px' }}\r\n      >\r\n        Add New Todo\r\n      </Button>\r\n      <br />\r\n      <Container className=\"rounded block-example border border-light\">\r\n        <h5>Status : New</h5>\r\n        <Table style={{ tableLayout: 'fixed' }}>\r\n          <thead>\r\n            <tr>\r\n              <th>Title</th>\r\n              <th>Date</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {todoList\r\n              .filter((filter) => filter.status === 0)\r\n              .sort(function (a, b) {\r\n                return new Date(a.createdAt) - new Date(b.createdAt);\r\n              })\r\n              .map((todo, index) => (\r\n                <tr\r\n                  key={index}\r\n                  onClick={() => {\r\n                    setModalDetail(true);\r\n                    detail(todo);\r\n                  }}\r\n                >\r\n                  <td> {todo.title}</td>\r\n                  <td>{todo.createdAt}</td>\r\n                </tr>\r\n              ))}\r\n          </tbody>\r\n        </Table>\r\n      </Container>\r\n      <Container>\r\n        <h5>Status : Done</h5>\r\n        <Table style={{ tableLayout: 'fixed' }}>\r\n          <thead>\r\n            <tr>\r\n              <th>Title</th>\r\n              <th>Date</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {todoList\r\n              .filter((filter) => filter.status === 1)\r\n              .sort(function (a, b) {\r\n                return new Date(b.createdAt) - new Date(a.createdAt);\r\n              })\r\n              .map((todo, index) => (\r\n                <tr\r\n                  key={index}\r\n                  onClick={() => {\r\n                    setModalDetail(true);\r\n                    detail(todo);\r\n                  }}\r\n                >\r\n                  <td> {todo.title}</td>\r\n                  <td>{todo.createdAt}</td>\r\n                </tr>\r\n              ))}\r\n          </tbody>\r\n        </Table>\r\n      </Container>\r\n\r\n      <Modal\r\n        show={modal}\r\n        onHide={() => setModal(false)}\r\n        keyboard={false}\r\n        dialogClassName=\"modal-10w\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>ToDo's New</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form onSubmit={(e) => newTodo(e)}>\r\n            <Form.Group>\r\n              <Form.Label>Title</Form.Label>\r\n              <Form.Control type=\"text\" name=\"title\" required />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label>Description</Form.Label>\r\n              <Form.Control type=\"text\" name=\"description\" required />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label>Status</Form.Label>\r\n              <Form.Control as=\"select\" name=\"status\">\r\n                <option value={0}>New</option>\r\n                <option value={1}>Done</option>\r\n              </Form.Control>\r\n            </Form.Group>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              Submit\r\n            </Button>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer></Modal.Footer>\r\n      </Modal>\r\n\r\n      <Modal\r\n        show={modalDetail}\r\n        onHide={() => setModalDetail(false)}\r\n        keyboard={false}\r\n        dialogClassName=\"modal-10w\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>{title}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Container></Container>\r\n          <Form onSubmit={(e) => updateTodo(e)}>\r\n            <Form.Group>\r\n              <Form.Label>Title</Form.Label>\r\n              <Form.Control\r\n                onChange={(e) => setTitle(e.target.value)}\r\n                type=\"text\"\r\n                name=\"title\"\r\n                value={title}\r\n                required\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label>Description</Form.Label>\r\n              <Form.Control\r\n                onChange={(e) => setDescription(e.target.value)}\r\n                type=\"text\"\r\n                name=\"description\"\r\n                value={description}\r\n                required\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label>Status</Form.Label>\r\n              <Form.Control\r\n                as=\"select\"\r\n                onChange={(e) => setStatus(e.target.value)}\r\n                name=\"status\"\r\n                value={status}\r\n              >\r\n                <option value={0}>New</option>\r\n                <option value={1}>Done</option>\r\n              </Form.Control>\r\n            </Form.Group>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              Update\r\n            </Button>\r\n          </Form>\r\n        </Modal.Body>\r\n        {status2 == 0 && (\r\n          <Modal.Footer>\r\n            <Button\r\n              className=\"ml-auto\"\r\n              variant=\"danger\"\r\n              onClick={(e) => deleteTodo(e)}\r\n            >\r\n              Delete\r\n            </Button>\r\n          </Modal.Footer>\r\n        )}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\nexport default Home;\r\n","import React from 'react';\r\nimport { Navbar } from 'react-bootstrap';\r\n\r\nexport default function Header() {\r\n  return (\r\n    <Navbar bg=\"light\" expand=\"lg\" className=\"ml-auto\">\r\n      <Navbar.Brand>\r\n        <h4 style={{ color: 'green' }}>Majoo</h4>\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n    </Navbar>\r\n  );\r\n}\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './App.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Home from './components/home';\nimport Header from './components/header';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Header />\n        <br />\n        <Home />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}